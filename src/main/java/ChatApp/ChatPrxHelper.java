//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ChatApp;

/**
 * Provides type-specific helper functions.
 **/
public final class ChatPrxHelper extends Ice.ObjectPrxHelperBase implements ChatPrx
{
    private static final String _sendMessage_name = "sendMessage";

    public void sendMessage(String sender, String recipient, String content)
    {
        _iceI_sendMessage(sender, recipient, content, null, false);
    }

    public void sendMessage(String sender, String recipient, String content, java.util.Map<String, String> context)
    {
        _iceI_sendMessage(sender, recipient, content, context, true);
    }

    private void _iceI_sendMessage(String iceP_sender, String iceP_recipient, String iceP_content, java.util.Map<String, String> context, boolean explicitCtx)
    {
        end_sendMessage(_iceI_begin_sendMessage(iceP_sender, iceP_recipient, iceP_content, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content, java.util.Map<String, String> context)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, context, true, false, null);
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content, Ice.Callback cb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, null, false, false, cb);
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, context, true, false, cb);
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content, Callback_Chat_sendMessage cb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, null, false, false, cb);
    }

    public Ice.AsyncResult begin_sendMessage(String sender, String recipient, String content, java.util.Map<String, String> context, Callback_Chat_sendMessage cb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, context, true, false, cb);
    }

    public Ice.AsyncResult begin_sendMessage(String sender,
                                             String recipient,
                                             String content,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendMessage(String sender,
                                             String recipient,
                                             String content,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_sendMessage(String sender,
                                             String recipient,
                                             String content,
                                             java.util.Map<String, String> context,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendMessage(String sender,
                                             String recipient,
                                             String content,
                                             java.util.Map<String, String> context,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendMessage(sender, recipient, content, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_sendMessage(String iceP_sender,
                                                    String iceP_recipient,
                                                    String iceP_content,
                                                    java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.Functional_VoidCallback responseCb,
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                    IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendMessage(iceP_sender,
                                       iceP_recipient,
                                       iceP_content,
                                       context,
                                       explicitCtx,
                                       synchronous,
                                       new IceInternal.Functional_OnewayCallback(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_sendMessage(String iceP_sender,
                                                    String iceP_recipient,
                                                    String iceP_content,
                                                    java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.CallbackBase cb)
    {
        IceInternal.OutgoingAsync result = getOutgoingAsync(_sendMessage_name, cb);
        try
        {
            result.prepare(_sendMessage_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_sender);
            ostr.writeString(iceP_recipient);
            ostr.writeString(iceP_content);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_sendMessage(Ice.AsyncResult iresult)
    {
        _end(iresult, _sendMessage_name);
    }

    private static final String _makeCall_name = "makeCall";

    public void makeCall(String caller, String callee)
    {
        _iceI_makeCall(caller, callee, null, false);
    }

    public void makeCall(String caller, String callee, java.util.Map<String, String> context)
    {
        _iceI_makeCall(caller, callee, context, true);
    }

    private void _iceI_makeCall(String iceP_caller, String iceP_callee, java.util.Map<String, String> context, boolean explicitCtx)
    {
        end_makeCall(_iceI_begin_makeCall(iceP_caller, iceP_callee, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee)
    {
        return _iceI_begin_makeCall(caller, callee, null, false, false, null);
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee, java.util.Map<String, String> context)
    {
        return _iceI_begin_makeCall(caller, callee, context, true, false, null);
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee, Ice.Callback cb)
    {
        return _iceI_begin_makeCall(caller, callee, null, false, false, cb);
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_makeCall(caller, callee, context, true, false, cb);
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee, Callback_Chat_makeCall cb)
    {
        return _iceI_begin_makeCall(caller, callee, null, false, false, cb);
    }

    public Ice.AsyncResult begin_makeCall(String caller, String callee, java.util.Map<String, String> context, Callback_Chat_makeCall cb)
    {
        return _iceI_begin_makeCall(caller, callee, context, true, false, cb);
    }

    public Ice.AsyncResult begin_makeCall(String caller,
                                          String callee,
                                          IceInternal.Functional_VoidCallback responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_makeCall(caller, callee, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_makeCall(String caller,
                                          String callee,
                                          IceInternal.Functional_VoidCallback responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                          IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_makeCall(caller, callee, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_makeCall(String caller,
                                          String callee,
                                          java.util.Map<String, String> context,
                                          IceInternal.Functional_VoidCallback responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_makeCall(caller, callee, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_makeCall(String caller,
                                          String callee,
                                          java.util.Map<String, String> context,
                                          IceInternal.Functional_VoidCallback responseCb,
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                          IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_makeCall(caller, callee, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_makeCall(String iceP_caller,
                                                 String iceP_callee,
                                                 java.util.Map<String, String> context,
                                                 boolean explicitCtx,
                                                 boolean synchronous,
                                                 IceInternal.Functional_VoidCallback responseCb,
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                 IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_makeCall(iceP_caller,
                                    iceP_callee,
                                    context,
                                    explicitCtx,
                                    synchronous,
                                    new IceInternal.Functional_OnewayCallback(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_makeCall(String iceP_caller,
                                                 String iceP_callee,
                                                 java.util.Map<String, String> context,
                                                 boolean explicitCtx,
                                                 boolean synchronous,
                                                 IceInternal.CallbackBase cb)
    {
        IceInternal.OutgoingAsync result = getOutgoingAsync(_makeCall_name, cb);
        try
        {
            result.prepare(_makeCall_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_caller);
            ostr.writeString(iceP_callee);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_makeCall(Ice.AsyncResult iresult)
    {
        _end(iresult, _makeCall_name);
    }

    private static final String _createGroup_name = "createGroup";

    public void createGroup(String groupName, String[] members)
    {
        _iceI_createGroup(groupName, members, null, false);
    }

    public void createGroup(String groupName, String[] members, java.util.Map<String, String> context)
    {
        _iceI_createGroup(groupName, members, context, true);
    }

    private void _iceI_createGroup(String iceP_groupName, String[] iceP_members, java.util.Map<String, String> context, boolean explicitCtx)
    {
        end_createGroup(_iceI_begin_createGroup(iceP_groupName, iceP_members, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members)
    {
        return _iceI_begin_createGroup(groupName, members, null, false, false, null);
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members, java.util.Map<String, String> context)
    {
        return _iceI_begin_createGroup(groupName, members, context, true, false, null);
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members, Ice.Callback cb)
    {
        return _iceI_begin_createGroup(groupName, members, null, false, false, cb);
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_createGroup(groupName, members, context, true, false, cb);
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members, Callback_Chat_createGroup cb)
    {
        return _iceI_begin_createGroup(groupName, members, null, false, false, cb);
    }

    public Ice.AsyncResult begin_createGroup(String groupName, String[] members, java.util.Map<String, String> context, Callback_Chat_createGroup cb)
    {
        return _iceI_begin_createGroup(groupName, members, context, true, false, cb);
    }

    public Ice.AsyncResult begin_createGroup(String groupName,
                                             String[] members,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_createGroup(groupName, members, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_createGroup(String groupName,
                                             String[] members,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_createGroup(groupName, members, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_createGroup(String groupName,
                                             String[] members,
                                             java.util.Map<String, String> context,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_createGroup(groupName, members, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_createGroup(String groupName,
                                             String[] members,
                                             java.util.Map<String, String> context,
                                             IceInternal.Functional_VoidCallback responseCb,
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                             IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_createGroup(groupName, members, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_createGroup(String iceP_groupName,
                                                    String[] iceP_members,
                                                    java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.Functional_VoidCallback responseCb,
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                    IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_createGroup(iceP_groupName,
                                       iceP_members,
                                       context,
                                       explicitCtx,
                                       synchronous,
                                       new IceInternal.Functional_OnewayCallback(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_createGroup(String iceP_groupName,
                                                    String[] iceP_members,
                                                    java.util.Map<String, String> context,
                                                    boolean explicitCtx,
                                                    boolean synchronous,
                                                    IceInternal.CallbackBase cb)
    {
        IceInternal.OutgoingAsync result = getOutgoingAsync(_createGroup_name, cb);
        try
        {
            result.prepare(_createGroup_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_groupName);
            StringSeqHelper.write(ostr, iceP_members);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_createGroup(Ice.AsyncResult iresult)
    {
        _end(iresult, _createGroup_name);
    }

    private static final String _sendVoiceNote_name = "sendVoiceNote";

    public void sendVoiceNote(String sender, String recipient, byte[] voiceData)
    {
        _iceI_sendVoiceNote(sender, recipient, voiceData, null, false);
    }

    public void sendVoiceNote(String sender, String recipient, byte[] voiceData, java.util.Map<String, String> context)
    {
        _iceI_sendVoiceNote(sender, recipient, voiceData, context, true);
    }

    private void _iceI_sendVoiceNote(String iceP_sender, String iceP_recipient, byte[] iceP_voiceData, java.util.Map<String, String> context, boolean explicitCtx)
    {
        end_sendVoiceNote(_iceI_begin_sendVoiceNote(iceP_sender, iceP_recipient, iceP_voiceData, context, explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, null, false, false, null);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData, java.util.Map<String, String> context)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, context, true, false, null);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData, Ice.Callback cb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, null, false, false, cb);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData, java.util.Map<String, String> context, Ice.Callback cb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, context, true, false, cb);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData, Callback_Chat_sendVoiceNote cb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, null, false, false, cb);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender, String recipient, byte[] voiceData, java.util.Map<String, String> context, Callback_Chat_sendVoiceNote cb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, context, true, false, cb);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender,
                                               String recipient,
                                               byte[] voiceData,
                                               IceInternal.Functional_VoidCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, null, false, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender,
                                               String recipient,
                                               byte[] voiceData,
                                               IceInternal.Functional_VoidCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                               IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, null, false, false, responseCb, exceptionCb, sentCb);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender,
                                               String recipient,
                                               byte[] voiceData,
                                               java.util.Map<String, String> context,
                                               IceInternal.Functional_VoidCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, context, true, false, responseCb, exceptionCb, null);
    }

    public Ice.AsyncResult begin_sendVoiceNote(String sender,
                                               String recipient,
                                               byte[] voiceData,
                                               java.util.Map<String, String> context,
                                               IceInternal.Functional_VoidCallback responseCb,
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                               IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendVoiceNote(sender, recipient, voiceData, context, true, false, responseCb, exceptionCb, sentCb);
    }

    private Ice.AsyncResult _iceI_begin_sendVoiceNote(String iceP_sender,
                                                      String iceP_recipient,
                                                      byte[] iceP_voiceData,
                                                      java.util.Map<String, String> context,
                                                      boolean explicitCtx,
                                                      boolean synchronous,
                                                      IceInternal.Functional_VoidCallback responseCb,
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> exceptionCb,
                                                      IceInternal.Functional_BoolCallback sentCb)
    {
        return _iceI_begin_sendVoiceNote(iceP_sender,
                                         iceP_recipient,
                                         iceP_voiceData,
                                         context,
                                         explicitCtx,
                                         synchronous,
                                         new IceInternal.Functional_OnewayCallback(responseCb, exceptionCb, sentCb));
    }

    private Ice.AsyncResult _iceI_begin_sendVoiceNote(String iceP_sender,
                                                      String iceP_recipient,
                                                      byte[] iceP_voiceData,
                                                      java.util.Map<String, String> context,
                                                      boolean explicitCtx,
                                                      boolean synchronous,
                                                      IceInternal.CallbackBase cb)
    {
        IceInternal.OutgoingAsync result = getOutgoingAsync(_sendVoiceNote_name, cb);
        try
        {
            result.prepare(_sendVoiceNote_name, Ice.OperationMode.Normal, context, explicitCtx, synchronous);
            Ice.OutputStream ostr = result.startWriteParams(Ice.FormatType.DefaultFormat);
            ostr.writeString(iceP_sender);
            ostr.writeString(iceP_recipient);
            ByteSeqHelper.write(ostr, iceP_voiceData);
            result.endWriteParams();
            result.invoke();
        }
        catch(Ice.Exception ex)
        {
            result.abort(ex);
        }
        return result;
    }

    public void end_sendVoiceNote(Ice.AsyncResult iresult)
    {
        _end(iresult, _sendVoiceNote_name);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatPrx checkedCast(Ice.ObjectPrx obj)
    {
        return checkedCastImpl(obj, ice_staticId(), ChatPrx.class, ChatPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatPrx checkedCast(Ice.ObjectPrx obj, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, context, ice_staticId(), ChatPrx.class, ChatPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatPrx checkedCast(Ice.ObjectPrx obj, String facet)
    {
        return checkedCastImpl(obj, facet, ice_staticId(), ChatPrx.class, ChatPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @param context The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static ChatPrx checkedCast(Ice.ObjectPrx obj, String facet, java.util.Map<String, String> context)
    {
        return checkedCastImpl(obj, facet, context, ice_staticId(), ChatPrx.class, ChatPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static ChatPrx uncheckedCast(Ice.ObjectPrx obj)
    {
        return uncheckedCastImpl(obj, ChatPrx.class, ChatPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param obj The untyped proxy.
     * @param facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static ChatPrx uncheckedCast(Ice.ObjectPrx obj, String facet)
    {
        return uncheckedCastImpl(obj, facet, ChatPrx.class, ChatPrxHelper.class);
    }

    private static final String[] _ids =
    {
        "::ChatApp::Chat",
        "::Ice::Object"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return _ids[0];
    }

    public static void write(Ice.OutputStream ostr, ChatPrx v)
    {
        ostr.writeProxy(v);
    }

    public static ChatPrx read(Ice.InputStream istr)
    {
        Ice.ObjectPrx proxy = istr.readProxy();
        if(proxy != null)
        {
            ChatPrxHelper result = new ChatPrxHelper();
            result._copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
