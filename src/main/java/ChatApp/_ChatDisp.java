//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `Chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package ChatApp;

public abstract class _ChatDisp extends Ice.ObjectImpl implements Chat
{
    private static final String[] _ids =
    {
        "::ChatApp::Chat",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current current)
    {
        return java.util.Arrays.binarySearch(_ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return _ids;
    }

    public String[] ice_ids(Ice.Current current)
    {
        return _ids;
    }

    public String ice_id()
    {
        return _ids[0];
    }

    public String ice_id(Ice.Current current)
    {
        return _ids[0];
    }

    public static String ice_staticId()
    {
        return _ids[0];
    }

    public final void sendMessage(String sender, String recipient, String content)
    {
        sendMessage(sender, recipient, content, null);
    }

    public final void makeCall(String caller, String callee)
    {
        makeCall(caller, callee, null);
    }

    public final void createGroup(String groupName, String[] members)
    {
        createGroup(groupName, members, null);
    }

    public final void sendVoiceNote(String sender, String recipient, byte[] voiceData)
    {
        sendVoiceNote(sender, recipient, voiceData, null);
    }

    public static boolean _iceD_sendMessage(Chat obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        String iceP_sender;
        String iceP_recipient;
        String iceP_content;
        iceP_sender = istr.readString();
        iceP_recipient = istr.readString();
        iceP_content = istr.readString();
        inS.endReadParams();
        obj.sendMessage(iceP_sender, iceP_recipient, iceP_content, current);
        inS.writeEmptyParams();
        return true;
    }

    public static boolean _iceD_makeCall(Chat obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        String iceP_caller;
        String iceP_callee;
        iceP_caller = istr.readString();
        iceP_callee = istr.readString();
        inS.endReadParams();
        obj.makeCall(iceP_caller, iceP_callee, current);
        inS.writeEmptyParams();
        return true;
    }

    public static boolean _iceD_createGroup(Chat obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        String iceP_groupName;
        String[] iceP_members;
        iceP_groupName = istr.readString();
        iceP_members = StringSeqHelper.read(istr);
        inS.endReadParams();
        obj.createGroup(iceP_groupName, iceP_members, current);
        inS.writeEmptyParams();
        return true;
    }

    public static boolean _iceD_sendVoiceNote(Chat obj, IceInternal.Incoming inS, Ice.Current current)
        throws Ice.UserException
    {
        _iceCheckMode(Ice.OperationMode.Normal, current.mode);
        Ice.InputStream istr = inS.startReadParams();
        String iceP_sender;
        String iceP_recipient;
        byte[] iceP_voiceData;
        iceP_sender = istr.readString();
        iceP_recipient = istr.readString();
        iceP_voiceData = ByteSeqHelper.read(istr);
        inS.endReadParams();
        obj.sendVoiceNote(iceP_sender, iceP_recipient, iceP_voiceData, current);
        inS.writeEmptyParams();
        return true;
    }

    private final static String[] _all =
    {
        "createGroup",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "makeCall",
        "sendMessage",
        "sendVoiceNote"
    };

    public boolean _iceDispatch(IceInternal.Incoming in, Ice.Current current)
        throws Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_all, current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_createGroup(this, in, current);
            }
            case 1:
            {
                return _iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return _iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return _iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return _iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_makeCall(this, in, current);
            }
            case 6:
            {
                return _iceD_sendMessage(this, in, current);
            }
            case 7:
            {
                return _iceD_sendVoiceNote(this, in, current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }

    protected void _iceWriteImpl(Ice.OutputStream ostr_)
    {
        ostr_.startSlice(ice_staticId(), -1, true);
        ostr_.endSlice();
    }

    protected void _iceReadImpl(Ice.InputStream istr_)
    {
        istr_.startSlice();
        istr_.endSlice();
    }

    public static final long serialVersionUID = 0L;
}
